PUT /_watcher/watch/es_disk_space
{
  "trigger": {
    "schedule": {
      "interval": "1h"
    }
  },
  "input": {
    "chain": {
      "inputs": [
        {
          "node_stats": {
            "search": {
              "request": {
                "search_type": "query_then_fetch",
                "indices": [
                  ".monitoring-es*"
                ],
                "body": {
                  "query": {
                    "bool": {
                      "filter": [
                        {
                          "range": {
                            "timestamp": {
                              "gte": "now-{{ctx.metadata.lower_bound_time}}"
                            }
                          }
                        },
                        {
                          "term": {
                            "type": "node_stats"
                          }
                        }
                      ]
                    }
                  },
                  "aggs": {
                    "nodes": {
                      "terms": {
                        "field": "source_node.name",
                        "size": "{{ctx.metadata.agg_size}}"
                      },
                      "aggs": {
                        "total_in_bytes": {
                          "max": {
                            "field": "node_stats.fs.total.total_in_bytes"
                          }
                        },
                        "available_in_bytes": {
                          "max": {
                            "field": "node_stats.fs.total.available_in_bytes"
                          }
                        },
                        "free_ratio": {
                          "bucket_script": {
                            "buckets_path": {
                              "available_in_bytes": "available_in_bytes",
                              "total_in_bytes": "total_in_bytes"
                            },
                            "script": "params.available_in_bytes/params.total_in_bytes"
                          }
                        }
                      }
                    }
                  },
                  "size": "{{ctx.metadata.hits_size}}"
                }
              }
            }
          }
        },
        {
          "index_stats": {
            "search": {
              "request": {
                "search_type": "query_then_fetch",
                "indices": [
                  "watcher-action-history"
                ],
                "body": {
                  "size": 1,
                  "sort": [
                    {
                      "executed_At": {
                        "order": "desc"
                      }
                    }
                  ],
                  "query": {
                    "term": {
                      "detail.watch_id": {
                        "value": "{{ctx.watch_id}}"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      ]
    }
  },
  "condition": {
    "script": {
      "source": "List p,q = new ArrayList();List r = new ArrayList();if(ctx.payload.node_stats.aggregations.nodes.buckets.stream().anyMatch(it->it.free_ratio.value<ctx.metadata.disk_threshold)){p=ctx.payload.node_stats.aggregations.nodes.buckets.stream().filter(it->it.free_ratio.value<ctx.metadata.disk_threshold).collect(Collectors.toList());if (ctx.payload.index_stats.hits.hits.length != 0 ){q=ctx.payload.index_stats.hits.hits[0]._source.detail.payloadTransform;r=p.stream().filter(t->!q.stream().map(e->e.node_name).collect(Collectors.toList()).contains(t.key)).collect(Collectors.toList());}else{r=[]}if(p.length == q.length && r.length == 0){return false}else{return true}} else if (ctx.payload.index_stats.hits.hits.length != 0 && ctx.payload.index_stats.hits.hits[0]._source.detail.payloadTransform.length != 0 ){return true}else{return false}",
      "lang": "painless"
    }
  },
  "actions": {
    "send_email": {
      "condition": {
        "script": {
          "source": "List a,b = new ArrayList();if (ctx.payload.detail.indexData.length != 0 ){a=ctx.payload.detail.indexData.stream().map(e->e.node_name).collect(Collectors.toList());b=ctx.payload.detail.payloadData.stream().filter(t->!a.contains(t.node_name)).collect(Collectors.toList());}else{b=ctx.payload.detail.payloadData;} if (b.length != 0 ){return true}else {return false}",
          "lang": "painless"
        }
      },
      "transform": {
        "script": {
          "source": "List a,b = new ArrayList();if (ctx.payload.detail.indexData.length != 0 ){a=ctx.payload.detail.indexData.stream().map(e->e.node_name).collect(Collectors.toList());b=ctx.payload.detail.payloadData.stream().filter(t->!a.contains(t.node_name)).collect(Collectors.toList());}else{b=ctx.payload.detail.payloadData;} def docs = ['watch_id' : ctx.watch_id, 'payloadTransform' : b];return ['detail' : docs];",
          "lang": "painless"
        }
      },
      "email": {
        "profile": "standard",
        "from": "mail-esaas-platform@nl.abnamro.com",
        "to": [
          "mail-esaas-platform@nl.abnamro.com"
        ],
        "subject": "Watcher_Notification-{{ctx.watch_id}}",
        "body": {
          "text": "Available space on Filesystem is below recommended ratio for following nodes: {{#ctx.payload.detail.payloadTransform}}\nFor node_{{node_name}}: {{available_in_gb}}gb({{available_ratio}}%) of {{total_in_gb}}gb is available{{/ctx.payload.detail.payloadTransform}}"
        }
      }
    },
    "log": {
      "condition": {
        "script": {
          "source": "List a,b = new ArrayList();if (ctx.payload.detail.indexData.length != 0 ){a=ctx.payload.detail.indexData.stream().map(e->e.node_name).collect(Collectors.toList());b=ctx.payload.detail.payloadData.stream().filter(t->!a.contains(t.node_name)).collect(Collectors.toList());}else{b=ctx.payload.detail.payloadData;} if (b.length != 0 ){return true}else {return false}",
          "lang": "painless"
        }
      },
      "transform": {
        "script": {
          "source": "List a,b = new ArrayList();if (ctx.payload.detail.indexData.length != 0 ){a=ctx.payload.detail.indexData.stream().map(e->e.node_name).collect(Collectors.toList());b=ctx.payload.detail.payloadData.stream().filter(t->!a.contains(t.node_name)).collect(Collectors.toList());}else{b=ctx.payload.detail.payloadData;} def docs = ['watch_id' : ctx.watch_id, 'payloadTransform' : b];return ['detail' : docs];",
          "lang": "painless"
        }
      },
      "logging": {
        "category": "xpack.watcher.actions.logging",
        "level": "warn",
        "text": "{{ctx.watch_id}}#MON.N.ESAAS.ELS00100#Available space on Filesystem is below recommended ratio in one or more nodes#{{#ctx.payload.detail.payloadTransform}}{{node_name}},{{/ctx.payload.detail.payloadTransform}}#node"
      }
    },
    "index_payload": {
      "condition": {
        "script": {
          "source": "List a,b = new ArrayList();if (ctx.payload.detail.indexData.length != 0 ){a=ctx.payload.detail.indexData.stream().map(e->e.node_name).collect(Collectors.toList());b=ctx.payload.detail.payloadData.stream().filter(t->!a.contains(t.node_name)).collect(Collectors.toList());}else{b=ctx.payload.detail.payloadData;} if (ctx.payload.detail.indexData.length == 0 ){return true}else if (ctx.payload.detail.payloadData.length != ctx.payload.detail.indexData.length){return true} else if (ctx.payload.detail.payloadData.length == ctx.payload.detail.indexData.length && b.length != 0){return true;} else {return false}",
          "lang": "painless"
        }
      },
      "transform": {
        "script": {
          "source": "def docs = ['watch_id' : ctx.watch_id, 'payloadTransform' : ctx.payload.detail.payloadData];return ['detail' : docs];",
          "lang": "painless"
        }
      },
      "index": {
        "index": "watcher-action-history",
        "execution_time_field": "executed_At"
      }
    }
  },
  "metadata": {
    "agg_size": 100,
    "hits_size": 0,
    "lower_bound_time": "3m",
    "disk_threshold": 0.2
  },
  "transform": {
    "script": {
      "source": "List p,q = new ArrayList();List r = new ArrayList();p=ctx.payload.node_stats.aggregations.nodes.buckets.stream().filter(it -> it.free_ratio.value < ctx.metadata.disk_threshold).map(it -> ['node_name':it.key,'available_in_gb':Math.round((it.available_in_bytes.value/1073741824) * 100)/100,'total_in_gb':Math.round((it.total_in_bytes.value/1073741824)* 100)/100,'available_ratio': Math.round(it.free_ratio.value*100)]).collect(Collectors.toList());if (ctx.payload.index_stats.hits.hits.length != 0 ){q=ctx.payload.index_stats.hits.hits[0]._source.detail.payloadTransform;r=p.stream().filter(t->!q.stream().map(e->e.node_name).collect(Collectors.toList()).contains(t.key)).collect(Collectors.toList());}else{r=[]} def docs = ['watch_id' : ctx.watch_id, 'payloadData' : p, 'indexData' : q];return ['detail' : docs];",
      "lang": "painless"
    }
  }
}
